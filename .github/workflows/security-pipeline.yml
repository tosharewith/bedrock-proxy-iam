name: Security-Enhanced Build Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly security scans

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/bedrock-proxy

permissions:
  contents: read
  packages: write
  security-events: write
  id-token: write

jobs:
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    # ========================================================================
    # OWASP Dependency Check
    # ========================================================================
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'bedrock-proxy'
        path: '.'
        format: 'ALL'
        args: >
          --enableRetired
          --enableExperimental
          --nvdApiKey ${{ secrets.NVD_API_KEY }}
          --nvdApiDelay 2000
          --failOnCVSS 7.0

    - name: Upload OWASP Dependency Check results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: reports/dependency-check-report.sarif

    # ========================================================================
    # Go Security Analysis
    # ========================================================================
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run Go security checker (gosec)
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec-results.sarif ./...'

    - name: Upload gosec results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec-results.sarif

    # ========================================================================
    # CodeQL Analysis
    # ========================================================================
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: go

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    # ========================================================================
    # Trivy Filesystem Scan
    # ========================================================================
    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: Upload Trivy filesystem scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-fs-results.sarif'

  docker-build-scan:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: security-scan

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    # ========================================================================
    # Multi-stage secure Docker build
    # ========================================================================
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./build/Dockerfile
        platforms: linux/amd64,linux/arm64
        target: runtime
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDPLATFORM=linux/amd64
        outputs: type=docker,dest=/tmp/bedrock-proxy.tar

    - name: Load image for scanning
      run: docker load -i /tmp/bedrock-proxy.tar

    # ========================================================================
    # Comprehensive Container Security Scanning
    # ========================================================================

    # Trivy Container Scan
    - name: Run Trivy container scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
        format: 'sarif'
        output: 'trivy-container-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy container scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-container-results.sarif'

    # Grype vulnerability scanner
    - name: Run Grype vulnerability scanner
      uses: anchore/scan-action@v3
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
        fail-build: true
        severity-cutoff: high
        output-format: sarif

    - name: Upload Grype scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: ${{ steps.anchore-scan.outputs.sarif }}

    # Snyk container scan
    - name: Run Snyk to check Docker image
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
        args: --severity-threshold=high --file=build/Dockerfile

    # ========================================================================
    # OWASP ZAP Security Testing (if web service)
    # ========================================================================
    - name: Start container for security testing
      run: |
        docker run -d --name bedrock-proxy-test \
          -p 8080:8080 \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
        sleep 30  # Wait for service to start

    - name: Run OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: 'http://localhost:8080'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

    - name: Stop test container
      run: docker stop bedrock-proxy-test && docker rm bedrock-proxy-test

    # ========================================================================
    # Push only if all scans pass
    # ========================================================================
    - name: Push Docker image
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./build/Dockerfile
        platforms: linux/amd64,linux/arm64
        target: runtime
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        build-args: |
          BUILDPLATFORM=linux/amd64

    # ========================================================================
    # Generate Security Report
    # ========================================================================
    - name: Generate Security Report
      run: |
        echo "# Security Scan Report" > security-report.md
        echo "## Build Information" >> security-report.md
        echo "- **Image:** ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}" >> security-report.md
        echo "- **Scan Date:** $(date)" >> security-report.md
        echo "- **Commit:** ${{ github.sha }}" >> security-report.md
        echo "" >> security-report.md
        echo "## Scan Status" >> security-report.md
        echo "- ✅ OWASP Dependency Check: Passed" >> security-report.md
        echo "- ✅ Go Security Check (gosec): Passed" >> security-report.md
        echo "- ✅ CodeQL Analysis: Passed" >> security-report.md
        echo "- ✅ Trivy Scan: Passed" >> security-report.md
        echo "- ✅ Grype Scan: Passed" >> security-report.md
        echo "" >> security-report.md
        echo "## Image Analysis" >> security-report.md
        docker history ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }} >> security-report.md

    - name: Upload Security Report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.md

  compliance-check:
    name: Compliance & Policy Check
    runs-on: ubuntu-latest
    needs: docker-build-scan

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # ========================================================================
    # Policy as Code with OPA
    # ========================================================================
    - name: Setup OPA
      uses: open-policy-agent/setup-opa@v2
      with:
        version: latest

    - name: Run OPA Policy Tests
      run: |
        opa test policies/

    # ========================================================================
    # Kubernetes Security Policies
    # ========================================================================
    - name: Validate Kubernetes manifests
      run: |
        find deployments/kubernetes -name "*.yaml" -exec kubeval {} \;

    - name: Run Polaris for Kubernetes best practices
      uses: fairwindsops/polaris/.github/actions/polaris@master
      with:
        config-file: .polaris.yaml
        version: latest

    # ========================================================================
    # Infrastructure Security with Checkov
    # ========================================================================
    - name: Run Checkov Terraform scan
      uses: bridgecrewio/checkov-action@master
      with:
        directory: deployments/terraform
        framework: terraform
        output_format: sarif
        output_file_path: checkov-results.sarif

    - name: Upload Checkov scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: checkov-results.sarif

  sign-and-sbom:
    name: Sign Image & Generate SBOM
    runs-on: ubuntu-latest
    needs: compliance-check
    if: github.event_name != 'pull_request'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install cosign
      uses: sigstore/cosign-installer@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # ========================================================================
    # Generate Software Bill of Materials (SBOM)
    # ========================================================================
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: spdx-json
        output-file: sbom.spdx.json

    # ========================================================================
    # Sign container image with cosign
    # ========================================================================
    - name: Sign container image
      run: |
        cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

    - name: Attach SBOM to image
      run: |
        cosign attest --yes --predicate sbom.spdx.json ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.spdx.json